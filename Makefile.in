# Paths
PROJECT_DIR ?= $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST)))))

BIN=$(PROJECT_DIR)/bin
SRC=$(PROJECT_DIR)/src
INCLUDE=$(PROJECT_DIR)/include
LIB=$(PROJECT_DIR)/lib
UTIL=$(PROJECT_DIR)/util

TEST=$(PROJECT_DIR)/test
UNIT_TEST_DIR=$(TEST)/unit-tests
UNIT_TEST_BIN=$(UNIT_TEST_DIR)/bin
UNIT_TEST_SRC=$(UNIT_TEST_DIR)/src
REG_TEST_DIR=$(TEST)/integration-tests

THIRD_PARTY=$(PROJECT_DIR)/third-party
THIRD_PARTY_SRC=$(THIRD_PARTY)/source
THIRD_PARTY_BUILD=$(THIRD_PARTY)/build
THIRD_PARTY_INSTALL=$(THIRD_PARTY)/install

INITED_FILE=$(THIRD_PARTY)/initialized

DOC_PATH=$(PROJECT_DIR)/doxygen

SOURCE_LIB = $(THIRD_PARTY_INSTALL)/lib
SOURCE_INC = $(THIRD_PARTY_INSTALL)/include

# Google Test paths
GTEST_DIR=$(THIRD_PARTY_BUILD)/gtest
GTEST_HEADERS = $(SOURCE_INC)/gtest/*.h \
                $(SOURCE_INC)/gtest/internal/*.h
GTEST_SRCS = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# Compiler command and flags
CXX=@CXX@
CXXFLAGS = @CXXFLAGS@ -Wno-unused -Wno-unused-value -I$(INCLUDE)

# LD flags for tests
TEST_LDFLAGS += -lisl -lortools -lz -lrt -pthread -L$(SOURCE_LIB)

# Archiver command and flags
AR=ar
AR_FLAGS=rv

# Doxygen command
DOXYGEN=doxygen

# Python command
PYTHON=@PYTHON@

# Unzip command
UNZIP=@UNZIP@

# Library name and full path
LIBNAME=loopchainIR
EXE=$(LIB)/lib$(LIBNAME).a

# Install location
prefix=@prefix@
# Install log file
INSTALL_LOG=$(PROJECT_DIR)/installed.txt

# Unit tests list
UNIT_TESTS = 	RectangularDomain_test \
							LoopNest_test \
							LoopChain_test \
							Accesses_test \
							Subspace_test \
							Schedule_test \
							DefaultSequentialTransformation_test \
							FusionTransformation_test \
							ShiftTransformation_test \
							AutomaticShiftTransformation_test \
							TileTransformation_test \
							WavefrontTransformation_test \
							ParallelAnnotation_test

# Integration tests list
INT_TEST = 	1N_1D_shift_1.test \
						1N_2D_shift_1_2.test \
						1N_2D_tile.test \
						2N_1D_2D_tile_1.test \
						2N_1D_fuse.test \
						2N_2D_fuse_tile.test \
						2N_3D.test \
						example.test \
						1N_3D.test \
						2N_1D_2D_tile_2.test \
						2N_1D_shift_1.test \
						2N_1D.test \
						2N_2D.test \
						3N_1D_2D_3D.test \
						1N_1D.test \
						1N_2D.test \
						2N_1D_2D.test \
						2N_1D_2D_tile_all.test \
						2N_1D_shift_fuse.test \
						2N_2D_fuse.test \
						2N_3D_fuse.test \
						3N_3D_2D_1D.test


# Project object files
ROSE_DEPENDENT_SRC = SageTransformationWalker

BASE_SRC = \
					RectangularDomain \
					LoopChain \
					LoopNest \
					Schedule \
					Subspace \
					DefaultSequentialTransformation \
					ShiftTransformation \
					TileTransformation \
					FusionTransformation \
					WavefrontTransformation \
					ISLASTRoot \
					Accesses \
					AutomaticShiftTransformation \
					ParallelAnnotation \
					PrintISLWalker \
					ChapelTransformationWalker \
					util

OBJS = $(addprefix $(BIN)/,$(addsuffix .o,@SOURCE_SELECTION@))

.PHONY: all
all: $(EXE)

$(EXE): $(OBJS)
	$(AR) $(ARFLAGS) $@ $^

# Building the Ojbect Files
$(OBJS): $(BIN)/%.o : $(SRC)/%.cpp $(INCLUDE)/LoopChainIR/%.hpp
	$(CXX) $(CXXFLAGS) $< -c -o $@


# Testing
.PHONY: test unit-tests integration-tests
test: unit-tests integration-tests

unit-tests: $(UNIT_TESTS)

integration-tests: $(EXE)
	$(PYTHON) $(UTIL)/integration-util.py -r $(UTIL)/resources -p $(PROJECT_DIR) $(addprefix $(REG_TEST_DIR)/,$(INT_TEST))

$(UNIT_TESTS): $(EXE) $(UNIT_TEST_BIN)/libgtest_main.a
	$(CXX) $(CXXFLAGS) $(INCFLAGS) -I$(SOURCE_INC) \
		$(UNIT_TEST_SRC)/$@.cpp \
		-l$(LIBNAME) -lgtest_main $(TEST_LDFLAGS) -L$(UNIT_TEST_BIN) -L$(LIB) \
		-o $(UNIT_TEST_BIN)/$@
	$(UNIT_TEST_BIN)/$@

$(INT_TEST): $(EXE)
	$(PYTHON) $(UTIL)/integration-util.py -r $(UTIL)/resources -se -p $(PROJECT_DIR) $(REG_TEST_DIR)/$@

#Building the Google Test framework

$(GTEST_DIR) : | $(SOURCE_LIB) $(SOURCE_INC) $(THIRD_PARTY_BUILD)
	# Unzip and copy gtest
	$(UNZIP) -q $(THIRD_PARTY_SRC)/gtest-1.7.0.zip -d $(THIRD_PARTY_BUILD)
	mv $(THIRD_PARTY_BUILD)/gtest-1.7.0 $(GTEST_DIR)
	cp -r $(GTEST_DIR)/include/gtest $(SOURCE_INC)

$(GTEST_SRCS) : $(GTEST_DIR)

$(UNIT_TEST_BIN)/gtest-all.o : $(GTEST_SRCS)
	$(CXX) $(CXXFLAGS) -I$(GTEST_DIR) -I$(SOURCE_INC) $(INCFLAGS) -c \
            ${GTEST_DIR}/src/gtest-all.cc -o $@

$(UNIT_TEST_BIN)/gtest_main.o : $(GTEST_SRCS)
	$(CXX) $(CXXFLAGS) -I$(GTEST_DIR) -I$(SOURCE_INC) $(INCFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(UNIT_TEST_BIN)/gtest.a : $(UNIT_TEST_BIN)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(UNIT_TEST_BIN)/libgtest_main.a : $(UNIT_TEST_BIN)/gtest-all.o $(UNIT_TEST_BIN)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Building documentation
.PHONY: doc documentation
doc: documentation
documentation: clean-doc
	$(DOXYGEN)

$(THIRD_PARTY_INSTALL) $(THIRD_PARTY_BUILD) : | $(THIRD_PARTY_SRC)
	mkdir $@

$(SOURCE_LIB) $(SOURCE_INC) : | $(THIRD_PARTY_INSTALL)
	mkdir $@

# Cleaning
.PHONY: neat clean-doc clean-third-party clean-test clean-install clean-all clean
neat:
	- rm $(BIN)/*.o

clean-doc:
	- rm -r $(DOC_PATH)

clean-third-party:
	- rm -rf $(THIRD_PARTY_INSTALL) $(THIRD_PARTY_BUILD)

clean-test:
	- rm -r $(UNIT_TEST_BIN)/* $(REG_TEST_DIR)/*.log $(REG_TEST_DIR)/*.dir

clean-install:
	- rm $(INSTALL_LOG)

clean: clean-test
	- rm $(BIN)/*
	- rm $(LIB)/*

clean-all: clean-third-party clean clean-doc clean-install

# Installation
.PHONY: install uninstall
install: all
	# Remove previous install logs
	- rm $(INSTALL_LOG)
	# Write to instal log all files and directories created during installation
	# listing directories first
	[ -e $(prefix)/lib ] || echo $(prefix)/lib >> $(INSTALL_LOG)
	[ -e $(prefix)/include ] || echo $(prefix)/include >> $(INSTALL_LOG)
	find $(LIB)/* -type d -exec echo $(prefix)/"{}" \; | sed "s|$(PROJECT_DIR)/||" >> $(INSTALL_LOG)
	find $(INCLUDE)/* -type d -exec echo $(prefix)/"{}" \; | sed "s|$(PROJECT_DIR)/||" >> $(INSTALL_LOG)
	find $(LIB)/* -type f -exec echo $(prefix)/"{}" \; | sed "s|$(PROJECT_DIR)/||" >> $(INSTALL_LOG)
	find $(INCLUDE)/* -type f -exec echo $(prefix)/"{}" \; | sed "s|$(PROJECT_DIR)/||" >> $(INSTALL_LOG)

	# Create $(prefix)/lib and $(prefix)/include (if necessary)
	libtool --mode=install install -d lib $(prefix)
	libtool --mode=install install -d include $(prefix)
	# Copy all header files to $(prefix)/include (replicates dir stucture)
	libtool --mode=install cp -r $(INCLUDE)/ $(prefix)/
	# Copy all libraries to $(prefix)/lib
	libtool --mode=install install $(LIB)/* $(prefix)/lib

uninstall:
	# Test for existence of install log file
	[ ! -e $(INSTALL_LOG) ] && ( echo "No install log" && false ) || true
	# For each file in install log, if file exists, remove it
	for f in $$( cat $(INSTALL_LOG) ); \
	do \
		if [ -e $$f ]; \
		then \
			rm -rf $$f ;\
		fi; \
	done
